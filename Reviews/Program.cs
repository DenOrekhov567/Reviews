using Microsoft.EntityFrameworkCore;
using Reviews.Models;

namespace Reviews
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Создание объекта builder для создания веб-приложения
            var builder = WebApplication.CreateBuilder(args);

            // Этот код регистрирует контроллеры и их представления в сервисной коллекции для использования в приложении
            builder.Services.AddControllersWithViews();

            // Этот код регистрирует контекста базы данных AppDbContext с использованием MySQL базы данных для использования ее в приложении
            builder.Services.AddDbContext<AppDbContext>(options => options.UseMySQL("Server=localhost;Port=3306;Database=films;Uid=root;Pwd=password123;"));

            // Этот код создает объект app, используя конфигурацию builder
            var app = builder.Build();

            if (!app.Environment.IsDevelopment())
            {
                app.UseExceptionHandler("/Home/Error");
                app.UseHsts();
            }
            /* 
             * Этот код добавляет промежуточное ПО, которое автоматически перенаправляет все HTTP-запросы на HTTPS-версию сайта
             * Это обеспечивает безопасность передачи данных между клиентом и сервером
             */
            app.UseHttpsRedirection();

            /* 
             * Этот код добавляет промежуточное ПО, которое позволяет приложению обслуживать 
             * статические файлы, такие как изображения, CSS и JavaScript
             * Он позволяет клиентам получать доступ к этим файлам без вызова контроллеров приложения.
             */
            app.UseStaticFiles();
            /*
             * Этот код добавляет промежуточное ПО для обработки маршрутов запросов
             * Он определяет, какой контроллер и действие должны быть выполнены на основе URL-адреса запроса
             * Это позволяет приложению правильно обрабатывать входящие запросы и выбирать правильный контроллер для выполнения соответствующего действия
             */
            app.UseRouting();
            /*
             * Этот код добавляет промежуточное ПО для обработки авторизации
             * Он проверяет, что пользователь имеет право доступа к запрашиваемому ресурсу
             * Если у пользователя нет нужных прав, он будет перенаправлен на страницу входа в систему или отказа в доступе
             * Это обеспечивает безопасность и контроль доступа к функциям приложения
             */
            app.UseAuthorization();

            /*
             * Здесь определяется маршрут по умолчанию для контроллеров
             * Этот маршрут будет использоваться, если не будет найден другой соответствующий маршрут
             * Параметр "name" задает имя маршрута, по которому можно будет сослаться на него в коде
             * Параметр "pattern" задает шаблон для URL-адреса, по которому будет выполнен маршрутизатор
             * В данном случае, если не указывать явно контроллер и действие, будет выполнен контроллер "Home" и действие "Index"
             * Параметр "id?" указывает, что параметр "id" является необязательным
             */
            app.MapControllerRoute(name: "default", pattern: "{controller=Home}/{action=Index}/{id?}");

            // Этот код запускает само приложение
            app.Run();
        }
    }
}